{"version":3,"sources":["components/Message.jsx","components/FocusableInput.jsx","components/ImageGallery.jsx","components/PlayerStatus.jsx","components/TeamsList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Message","_jsxs","_Fragment","children","_jsx","href","FocusableInput","_ref","focusable","ImageGallery","_ref2","links","PlayerStatus","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","useEffect","TEAMS","name","players","games","score","city","TeamsList","setTeams","onClick","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"yMAYO,SAASA,IACf,OACCC,eAAAC,WAAA,CAAAC,SAAA,CACCC,cAAA,KAAGC,KAAK,IAAGF,SAAC,2BACZC,cAAA,KAAAD,SAAG,6BAGN,CCIO,SAASG,EAAcC,GAAwBA,EAArBC,SAEjC,CCPO,SAASC,EAAYC,GAAQA,EAALC,MAC9B,OACCP,cAAA,SAIF,C,WCJO,SAASQ,IACf,IAAAC,EAA4BC,mBAAS,UAASC,EAAAC,YAAAH,EAAA,GAC9CI,GADaF,EAAA,GAAWA,EAAA,GACMD,mBAAS,IAAEI,EAAAF,YAAAC,EAAA,GAA3BC,EAAA,GAAYA,EAAA,GAW1B,OAFAC,qBAAU,WAAO,GAAG,IAGnBlB,eAAA,OAAAE,SAAA,CACCC,cAAA,SACAA,cAAA,SACAA,cAAA,UAAAD,SAAQ,oBAGX,CC1BA,IAAMiB,EAAQ,CACb,CACCC,KAAM,MACNC,QAAS,CAAC,QAAS,MAAO,QAAS,WACnCC,MAAO,CACN,CACCC,MAAO,GACPC,KAAM,MAEP,CACCD,MAAO,EACPC,KAAM,MAEP,CACCD,MAAO,EACPC,KAAM,QAIT,CACCJ,KAAM,OACNC,QAAS,CAAC,MAAO,OACjBC,MAAO,CACN,CACCC,MAAO,EACPC,KAAM,MAEP,CACCD,MAAO,EACPC,KAAM,QAIT,CACCJ,KAAM,SACNC,QAAS,CAAC,SAAU,UAAW,YAC/BC,MAAO,CACN,CACCC,MAAO,EACPC,KAAM,MAEP,CACCD,MAAO,EACPC,KAAM,MAEP,CACCD,MAAO,EACPC,KAAM,SAMH,SAASC,IACf,IAAAb,EAA0BC,mBAASM,GAAML,EAAAC,YAAAH,EAAA,GAA3Bc,GAAFZ,EAAA,GAAUA,EAAA,IAiBtB,OACCd,eAAA,OAAAE,SAAA,CACCC,cAAA,UAAQwB,QAAS,kBAAMD,EAASP,EAAM,EAACjB,SAAC,iBAExCC,cAAA,UAAAD,SAAQ,sBACRC,cAAA,UAAAD,SAAQ,sBACRC,cAAA,UAAAD,SAAQ,kCAERC,cAAA,MAAIyB,UAAU,YAGjB,C,MCvFe,SAASC,IACtB,OACE7B,eAAA,OAAK4B,UAAU,MAAK1B,SAAA,CAElBC,cAAA,MAAAD,SAAI,mBACJC,cAACJ,EAAO,IACRI,cAAA,SACAA,cAAA,MAAAD,SAAI,0BACJC,cAACE,EAAc,IACfF,cAAA,SACAA,cAAA,MAAAD,SAAI,wBACJC,cAACK,EAAY,IACbL,cAAA,SACAA,cAAA,MAAAD,SAAI,wBACJC,cAACQ,EAAY,IACbR,cAAA,SACAA,cAAA,MAAAD,SAAI,qBACJC,cAACsB,EAAS,MAGhB,CC7BA,IAYeK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAA3B,GAAkD,IAA/C4B,EAAM5B,EAAN4B,OAAQC,EAAM7B,EAAN6B,OAAQC,EAAM9B,EAAN8B,OAAQC,EAAM/B,EAAN+B,OAAQC,EAAOhC,EAAPgC,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJAQ,IAASC,OACPrC,cAACsC,IAAMC,WAAU,CAAAxC,SACfC,cAAC0B,EAAG,MAENc,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.c811a9c1.chunk.js","sourcesContent":["/*\n * The Message component contains an anchor element and\n * a paragraph below the anchor. Rendering of the paragraph\n * should be toggled by clicking on the anchor element\n * using the following logic:\n *\n * - At the start, the paragraph should not be rendered.\n * - After a click, the paragraph should be rendered.\n * - After another click, the paragraph should not be rendered.\n * - Finish the Message component by implementing this logic.\n */\n\nexport function Message() {\n\treturn (\n\t\t<>\n\t\t\t<a href=\"#\">Want to buy a new car?</a>\n\t\t\t<p>Call +11 22 33 44 now!</p>\n\t\t</>\n\t);\n}\n","/**\n * The TextInput component renders an input element in the DOM\n * and accepts a ref that is forwarded to that input element.\n * Finish the FocusableInput component:\n * - The component should accept a focused prop.\n * - When the focused prop is changed from false to true, and the input is not focused, it should receive the focus.\n * - If on mounting the focused prop is true, the input should receive the focus.\n */\n\nimport React, { useEffect, useRef } from \"react\";\n\nfunction Input(props) {\n\t// Implement\n}\n\nconst TextInput = React.forwardRef((props, ref) => {\n  // Implement\n});\n\n// Implement:\n// When the focused prop is changed from false to true,\n// and the input is not focused, it should receive focus.\n// If focused prop is true, the input should receive the focus.\nexport function FocusableInput({ focusable = false }) {\n\t// Implement\n}\n","/**\n * Implement the ImageGallery component that accepts a `links`\n * prop and renders the gallery so that the first\n * item in the links prop is the src attribute of the first image in the gallery.\n\n * It should also implement the following logic:\n * - When the button is clicked, the image that is in the same div as the button should be removed from the gallery.\n */\n\nfunction Image({ src, onRemove }) {\n\treturn (\n\t\t<div class=\"image\">\n\t\t\t<img />\n\t\t\t<button class=\"remove\">X</button>\n\t\t</div>\n\t);\n}\n\nexport function ImageGallery({ links }) {\n\treturn (\n\t\t<div>\n\t\t\t{/* Implement here the Image Gallery using <Image /> component */}\n\t\t</div>\n\t);\n}\n","/**\n * Finish the PlayerStatus component so that it follows the current status of the player.\n * - The status can be either \"online\" or \"away\".\n * - When the component first renders, the player should be \"online\".\n * - The toggleStatus function should change the status variable.\n * - The component should count how many times the user changed their status, using the counter.\n * - When the component first renders, the counter should be 1.\n * - The counter should be updated within useEffect when status changes.\n *\n * For example, after the first render, the div element with id root should look like this:\n *\n *   <div>\n *     <h1>Online</h1>\n *     <h3>1</h3>\n *     <button>Toggle status</button>\n *   </div>\n */\n\nimport { useState, useEffect } from \"react\";\n\nexport function PlayerStatus() {\n\tconst [status, setStatus] = useState(\"Online\");\n\tconst [counter, setCounter] = useState(0);\n\n\t// Toggle between the two status values - 'Away' and 'Online'\n\tfunction onToggleStatus() {\n\t\t// Write your code here\n\t}\n\n\t// Implement effect hook below.\n\t// Update the counter when status changes.\n\tuseEffect(() => {}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>{/** Render the status */}</h1>\n\t\t\t<h3>{/** Render the counter */}</h3>\n\t\t\t<button>Toggle status</button>\n\t\t</div>\n\t);\n}\n","/**\n * Given a list of teams, we need to expose the teams in different ways:\n * - Criteria 1: depending on the score, order the list from highest to lowest.\n * - Criteria 2: depending on the score, order the list from lowest to highest.\n * - Criteria 3: depending on the player's quantity, show ONLY the teams that has more than 3 players.\n *\n * What you need to implement is:\n * - 3 buttons. Each of them need to execute a criteria.\n * - The list of teams should be updated dynamically depending on the selected filter.\n * - Each team item should display: Team Name / Playerâ€™s quantity / Total Score of each team.\n */\n\nimport { useState } from \"react\";\n\nconst TEAMS = [\n\t{\n\t\tname: \"Red\",\n\t\tplayers: [\"Robin\", \"Rey\", \"Roger\", \"Richard\"],\n\t\tgames: [\n\t\t\t{\n\t\t\t\tscore: 10,\n\t\t\t\tcity: \"LA\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tscore: 1,\n\t\t\t\tcity: \"NJ\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tscore: 3,\n\t\t\t\tcity: \"NY\",\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: \"Blue\",\n\t\tplayers: [\"Bob\", \"Ben\"],\n\t\tgames: [\n\t\t\t{\n\t\t\t\tscore: 6,\n\t\t\t\tcity: \"CA\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tscore: 3,\n\t\t\t\tcity: \"LA\",\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: \"Yellow\",\n\t\tplayers: [\"Yesmin\", \"Yuliana\", \"Yosemite\"],\n\t\tgames: [\n\t\t\t{\n\t\t\t\tscore: 2,\n\t\t\t\tcity: \"NY\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tscore: 4,\n\t\t\t\tcity: \"LA\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tscore: 7,\n\t\t\t\tcity: \"AK\",\n\t\t\t},\n\t\t],\n\t},\n];\n\nexport function TeamsList() {\n\tconst [teams, setTeams] = useState(TEAMS);\n\n\t// Order teams by score (highest to lowest)\n\tfunction orderTeamByScoreHighestToLowest() {\n\t\t// Write your code here\n\t}\n\n\t// Order teams by score (lowest to highest)\n\tfunction orderTeamByScoreLowestToHighest() {\n\t\t// Write your code here\n\t}\n\n\t// Filtering teams that with at least 3 players\n\tfunction teamsWithMoreThanThreePlayers() {\n\t\t// Write your code here\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={() => setTeams(TEAMS)}>Initial list</button>\n\n\t\t\t<button>Highest to Lowest</button>\n\t\t\t<button>Lowest to Highest</button>\n\t\t\t<button>Teams with at least 3 players</button>\n\n\t\t\t<ul className=\"teams\">{/** Render the list of teams */}</ul>\n\t\t</div>\n\t);\n}\n","\nimport { Message } from \"./components/Message\";\nimport { FocusableInput } from \"./components/FocusableInput\";\nimport { ImageGallery } from \"./components/ImageGallery\";\nimport { PlayerStatus } from \"./components/PlayerStatus\";\nimport { TeamsList } from \"./components/TeamsList\";\n\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      {/* Render here each component from the \"components\" directory */}\n      <h3>'Message' test</h3>\n      <Message />\n      <br />\n      <h3>'FocusableInput' test</h3>\n      <FocusableInput />\n      <br />\n      <h3>'ImageGallery' test</h3>\n      <ImageGallery />\n      <br />\n      <h3>'PlayerStatus' test</h3>\n      <PlayerStatus />\n      <br />\n      <h3>'TeamsList' test</h3>\n      <TeamsList />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}